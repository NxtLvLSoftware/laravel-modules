#!/usr/bin/env php
<?php

/*
|--------------------------------------------------------------------------
| laravel-module cli application
|--------------------------------------------------------------------------
|
| This package can be installed globally and this executable can be run
| directly to manage your modules.
|
*/

define("LARAVEL_START", microtime(true));

foreach([
	"",
	"/..",
	"/../../..",
] as $path) {
	if(!file_exists($file = __DIR__ . $path . "/vendor/autoload.php")) {
		continue;
	}

	require_once $file;
	break;
}

/*
|--------------------------------------------------------------------------
| Create the application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new LaravelZero\Framework\Application(
	__DIR__
);

$app->useAppPath(__DIR__ . "/src");

/*
|--------------------------------------------------------------------------
| Bind important interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed.
|
*/

$app->singleton(
	Illuminate\Contracts\Console\Kernel::class,
	NxtLvlSoftware\LaravelModulesCli\Console\Kernel::class
);

$app->singleton(
	Illuminate\Contracts\Debug\ExceptionHandler::class,
	Illuminate\Foundation\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Run the application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers.
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
	$input = new Symfony\Component\Console\Input\ArgvInput,
	new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown the application
|--------------------------------------------------------------------------
|
| Once the command has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);